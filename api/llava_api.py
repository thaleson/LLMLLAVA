import json
import time 
import requests
from image_processing.encoder import encode_image_to_base64 
def query_llava_api(image_file, prompt="What's in this image?"):

    """
    Sends a request to the Ollama API using the LLaVA model to generate a response based on an image and a provided prompt.

    Args:
        image_file (str): Path to the image file to be sent to the API.
        prompt (str, optional): Prompt text for the API. The default is "What's in this image?".

    Returns:
        str: Response generated by the API based on the image and the prompt. If an error occurs, the function returns an error message.
    
    Exceptions:
        - RequestsException: Errors related to the HTTP request.
        - JSONDecodeError: Errors when trying to process the JSON response.
        - Exception: Any unexpected error that may occur during the function execution.
    
    The function makes a POST request to the image generation API, sending the image encoded in base64, the prompt, and the "llava" model. It tries to obtain the full response, handling potential response failures and retrying in case of failure.
    """
    url = "http://localhost:11434/api/generate"
    try:
        image_base64 = encode_image_to_base64(image_file)
        payload = {
            "model": "llava",
            "prompt": prompt,
            "images": [image_base64],
        }

        response = requests.post(url, json=payload)

        if response.status_code == 200:
            try:
                full_response = ''
                done = False
                max_retries = 5
                retry_count = 0

                while not done and retry_count < max_retries:
                    result = response.json()
                    for part in result:
                        full_response += part.get("response", "")
                        if part.get("done", False):
                            done = True
                            break

                    if not done:
                        retry_count += 1
                        time.sleep(3)
                        response = requests.post(url, json=payload)

                if done:
                    return full_response.strip()
                else:
                    return "Erro: Resposta não concluída."

            except json.JSONDecodeError as e:
                parts = response.text.split('\n')
                full_response = ''
                for part in parts:
                    if part.strip():
                        try:
                            json_part = json.loads(part.strip())
                            full_response += json_part.get("response", "")
                        except json.JSONDecodeError:
                            continue
                return full_response.strip()

        else:
            return f"Erro: {response.status_code}, {response.text}"
    except requests.exceptions.RequestException as e:
        return f"Erro de requisição: {e}"
    except Exception as e:
        return f"Erro inesperado: {e}"